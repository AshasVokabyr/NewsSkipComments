# main.py
from config import (
    BOT_TOKEN, MISTRAL_API_KEY, ADMINS, TECHCRUNCH_URL,
    COLLECTION_TIME, POSTING_TIME, CHANNEL_ID
)
from db import Database
from handlers import is_admin, get_admin_keyboard

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from mistralai import Mistral
import aiohttp
from bs4 import BeautifulSoup
import json
import re
from typing import Optional, Dict, List
from datetime import datetime
import pytz
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral
mistral_client = Mistral(api_key=MISTRAL_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_enabled = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def fetch_article_content(url: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    return await response.text()
                logger.warning(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status} –¥–ª—è URL: {url}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ {url}: {str(e)}")
        return None

async def is_question(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–º —Å –ø–æ–º–æ—â—å—é Mistral"""
    try:
        prompt = (
            "–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–º. "
            "–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ JSON —Å –∫–ª—é—á–∞–º–∏: is_question (–±—É–ª–µ–≤–æ), "
            "confidence (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1).\n\n–¢–µ–∫—Å—Ç: " + text
        )
        
        response = mistral_client.chat.complete(
            model="mistral-large-latest",
            messages=[{"role": "user", "content": prompt}],
            response_format={"type": "json_object"}
        )
        
        result = json.loads(response.choices[0].message.content)
        return result.get('is_question', False) and result.get('confidence', 0) >= 0.7
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return False

async def generate_answer(question: str, article_contents: List[Dict]) -> Optional[Dict]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–∞—Ç–µ–π"""
    try:
        articles_text = ""
        for i, article in enumerate(article_contents, 1):
            articles_text += f"\n\n--- –°—Ç–∞—Ç—å—è {i} ---\n{article['content']}"
        
        prompt = (
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–Ω–µ –±–æ–ª–µ–µ 300 —Å–ª–æ–≤) –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.\n\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
            f"–°—Ç–∞—Ç—å–∏:{articles_text}\n\n"
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏."
        )
        
        response = mistral_client.chat.complete(
            model="mistral-large-latest",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500
        )
        
        answer = response.choices[0].message.content
        if not answer:
            return None
            
        return {
            "text": answer if len(answer) <= 2000 else answer[:2000] + "..."
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None

async def parse_article_content(html_content: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ HTML"""
    try:
        soup = BeautifulSoup(html_content, 'html.parser')
        for element in soup(['script', 'style', 'nav', 'footer', 'iframe', 'img']):
            element.decompose()
        
        text = soup.get_text(separator='\n', strip=True)
        text = '\n'.join(line for line in text.splitlines() if line.strip())
        return text[:5000]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç—å–∏: {e}")
        return None

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            "ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@dp.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å", lambda message: is_admin(message.from_user.id))
async def bot_status(message: types.Message):
    await message.answer(
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω' if bot_enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"–í—Ä–µ–º—è: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "‚úÖ –í–∫–ª. –±–æ—Ç–∞", lambda message: is_admin(message.from_user.id))
async def enable_bot(message: types.Message):
    global bot_enabled
    bot_enabled = True
    await message.answer("üü¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω", reply_markup=get_admin_keyboard())
    logger.info(f"–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

@dp.message(F.text == "‚õî –í—ã–∫–ª. –±–æ—Ç–∞", lambda message: is_admin(message.from_user.id))
async def disable_bot(message: types.Message):
    global bot_enabled
    bot_enabled = False
    await message.answer("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_admin_keyboard())
    logger.info(f"–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")

@dp.message(F.chat.type.in_({'group', 'supergroup'}))
async def handle_group_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ (—á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)"""
    if not bot_enabled:
        return
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç
        parent_id = None
        if message.reply_to_message:
            logger.info(f"–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message.reply_to_message.message_id}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 8 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º –ø–æ—Å—Ç–æ–≤...")
            await asyncio.sleep(8)
            logger.info("–ó–∞–¥–µ—Ä–∂–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–∞ –≤ –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            parent_message = await db.get_message_by_telegram_id(message.reply_to_message.message_id)
            if not parent_message:
                logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.reply_to_message.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                return
                
            parent_id = parent_message['id']
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Å—Ç —Å ID: {parent_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await db.insert_message(
            telegram_id=message.message_id,
            message_text=message.text,
            user_id=message.from_user.id,
            username=message.from_user.username,
            parent_id=parent_id,
        )
        logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message.message_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")

        # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...
        if not message.reply_to_message or not await is_question(message.text):
            return
            
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.message_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        parent_message = await db.get_message_by_telegram_id(message.reply_to_message.message_id)
        if not parent_message or not parent_message.get('url'):
            return
            
        article_urls = parent_message['url']
        if not isinstance(article_urls, list):
            article_urls = [article_urls]
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        articles_data = []
        for url in article_urls[:3]:
            content = await fetch_article_content(url)
            if content:
                parsed = await parse_article_content(content)
                if parsed:
                    articles_data.append({
                        "url": url,
                        "content": parsed
                    })
        
        if not articles_data:
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer_result = await generate_answer(message.text, articles_data)
        if not answer_result:
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply(answer_result["text"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
        await db.insert_message(
            telegram_id=f"answer_{message.message_id}",
            message_text=answer_result["text"],
            user_id=bot.id,
            username=bot.username,
            parent_id=message.message_id,
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {str(e)}")

async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                reply_markup=get_admin_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())